---
title: "Class 13: Transcriptomics and the analysis of RNA-Seq"
author: "Lilia Jimenez (PID:A16262599)"
format: pdf
---

In todays class we will explore and analyze data  from a published RNA-seq experiment where airway smooth muscle cells were treated with dexamethasone, a synthetic glucocorticoid steroid with anti-inflammatory effects (Himes et al. 2014).

##data import

```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")
```

```{r}
head(counts)
```

```{r}
head(metadata)
```

>Q1. How many genes are in this dataset? 

```{r}
nrow(counts)
```

>Q2. How many ‘control’ cell lines do we have? 

```{r}
sum(metadata$dex=="control")
```

## Toy differential gene expression

Time to do some analysis
we have 4 control and 4 treated samples/experiments/columns

Make sure the metadata id column matches the columns in our count data.

```{r}
colnames(counts)
```

```{r}
metadata$id==colnames(counts)
```

To check that all the elements of a vector are TRUE we can use the 'all()' function

```{r}
all(c(T,T,T,F))
```

```{r}
all(colnames(counts)==metadata$id)
```

To start I will calculate the control.mean and treated.mean values and compare them.

-Identify and extract the 'control' only columns
-determine the mean value for each gene
-do the same for 'treated'

```{r}
#where does it tell me which columns are control?
control.inds <- metadata$dex=="control"
control.counts<-counts[,control.inds]
control.mean<-apply(control.counts, 1 ,mean)
head(control.mean)
```

```{r}
treated.inds <- metadata$dex=="treated"
treated.counts<-counts[,treated.inds]
treated.mean<-apply(treated.counts, 1 ,mean)
head(treated.mean)
```

lets store these together for ease of book-keeping

```{r}
meancounts<-data.frame(control.mean,treated.mean)
```

have a quick view of this data:

```{r}
plot(meancounts)
```

This data is screaming at us to log transform as it is so heavily skewed and over such a wide range

```{r}
plot(meancounts,log="xy")
```

I want to compare the treated and the control values here and we will use Fold changes in log2 units to do this. log2(Treated/Control)

```{r}
log2fc<-log2(meancounts$treated.mean/meancounts$control.mean)
meancounts$log2fc<-log2fc
```

no difference
```{r}
log2(20/20)
```

doubling in the treated
```{r}
log2(20/10)
```

```{r}
log2(5/10)
```

A common rule of thumb cutoff for calling a gene 'differentially expressed' is a log2 fold change of either >+2 or <-2 for "up-regulated" and "down regulated" respectively

```{r}
head(meancounts)
```

We first need to remove zero count genes- as we cant say anything about these genes anyways and their division log values are messing thing up.

```{r}
to.rm.ind<-rowSums(meancounts[,1:2]==0)>0
mycounts<-meancounts[!to.rm.ind,]
```

>Q.how many genes do we have left that we can say something about (i.e. they dont have any zero counts)

```{r}
nrow(mycounts)
```

using our threshold of +2/-2

```{r}
up.ind <- mycounts$log2fc > 2
down.ind <- mycounts$log2fc < (-2)
```

>Q8. Using the up.ind vector above can you determine how many up regulated genes we have at the greater than 2 fc level? 

```{r}
sum(up.ind)
```



>Q9. Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level? 

```{r}
sum(down.ind)
```


>Q10. Do you trust these results? Why or why not?

No, we haven't determined whether the results are statistically significant.


##DESeq analysis

lets do this properly with the help of DESeq2 package

```{r}
#\ message:false

library(DESeq2)
```

We have to use a specific data pbject for working with DESeq.

```{r}
dds <- DESeqDataSetFromMatrix(countData = counts,
                       colData = metadata,
                       design = ~dex)
```

Run our main analysis with the 'DESeq()'
```{r}
dds<-DESeq(dds)
```

To get the results out of our dds object we can use the DESeq function called 'results()'

```{r}
res<-results(dds)
head(res)
```

##Volcano plot

a very common and useful summary results figure for this type of analysis is called a volcano plot- a plot of log2FC vs P-value. We use the 'padj' the adjusted P value for multiple testing.

```{r}
plot(res$log2FoldChange, res$padj)
```

```{r}
plot(res$log2FoldChange, -log(res$padj))
```

Add some color and nice labels for this plot

```{r}
# Setup our custom point color vector 
mycols <- rep("gray", nrow(res))
mycols[ abs(res$log2FoldChange) > 2 ]  <- "red" 

inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "blue"

# Volcano plot with custom colors 
plot( res$log2FoldChange,  -log(res$padj), 
 col=mycols, ylab="-Log(P-value)", xlab="Log2(FoldChange)" )

# Cut-off lines
abline(v=c(-2,2), col="gray", lty=2)
abline(h=-log(0.1), col="gray", lty=2)
```


## add anotation data
We will use one of Bioconductor’s main annotation packages to help with mapping between various ID schemes.

```{r}
head(res)
```

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
```
```{r}
columns(org.Hs.eg.db)
```

```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="SYMBOL",          # The new format we want 
                     multiVals="first")
```

```{r}
head(res)
```

```{r}
res$entrez <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="ENTREZID",          # The new format we want to
                     multiVals="first")

head(res)
```

```{r}
res$uniprot <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="UNIPROT",          # The new format we want to
                     multiVals="first")
head(res)
```

##pathway analysis
Now that I have added the necessary annotation data i can talk to different databases that use these IDs 

we will use the gage package ti do geneset analysis(aka pathway analysis, geneset enrichment, overlap analysis)
```{r}
library(pathview)
library(gage)
library(gageData)
```

We will use KEGG first
```{r}
data(kegg.sets.hs)
head(kegg.sets.hs, 2)
```

The main gage() function requires a named vector of fold changes, where the names of the values are the Entrez gene IDs.

```{r}
foldchange<-res$log2FoldChange
names(foldchange)<-res$entrez
head(foldchange)
```

run the analysis
```{r}
keggres = gage(foldchange, gsets=kegg.sets.hs)
```

lets look at what is in our results here
```{r}
attributes(keggres)
```

```{r}
# Look at the first three down (less) pathways
head(keggres$less, 3)
```

I can now use the returned pathway IDs from KEGG as input to the 'pathview' package to make pathway figures with our DEGs highlighted

```{r}
pathview(gene.data=foldchange, pathway.id="hsa05310")
```

![](hsa05310.pathview.png)



